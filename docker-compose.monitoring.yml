version: '3.8'

# Docker Compose configuration for local monitoring stack
# Provides Prometheus + Grafana for observability
#
# Usage:
#   docker-compose -f docker-compose.monitoring.yml up -d
#
# Access:
#   Prometheus: http://localhost:9090
#   Grafana: http://localhost:3001 (admin/admin)
#
# Per PRD ยง12: All monitoring respects privacy and transparency principles

services:
  # ============================================================================
  # PROMETHEUS - Metrics Collection & Storage
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ai-music-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # GRAFANA - Metrics Visualization & Dashboards
  # ============================================================================
  grafana:
    image: grafana/grafana:10.2.2
    container_name: ai-music-grafana
    restart: unless-stopped
    ports:
      - '3001:3000' # Port 3001 to avoid conflict with Next.js dev server
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change in production!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # REDIS (Optional) - For distributed rate limiting
  # ============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: ai-music-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================================================================
# VOLUMES - Persistent Storage
# ============================================================================
volumes:
  prometheus_data:
    name: ai-music-prometheus-data
  grafana_data:
    name: ai-music-grafana-data
  redis_data:
    name: ai-music-redis-data

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  monitoring:
    name: ai-music-monitoring
    driver: bridge
